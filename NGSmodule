#!/usr/bin/env bash
###########################################################
#  Author     : zhanghao                                  #
###########################################################

shell_folder=$(dirname $(readlink -f "$0"))
source $shell_folder/GlobalFunction.sh

tmpfile=$(mktemp /tmp/NGSmodule.XXXXXXXXXXXXXX) || exit 1
trap_add "rm -f $tmpfile" SIGINT SIGTERM EXIT

CreateConfigFile() {
  source $shell_folder/PreparationSteps/CreateConfigFile.sh $1
}

CheckConfigFile() {
  if [[ ! -f $1 ]]; then
    echo -e "Cannot find the ConfigFile:$ConfigFile !\n"
    exit 1
  else
    echo -e ">>> Found the ConfigFile: $ConfigFile\n"
  fi
}

CreateSampleInfoFile() {
  source $shell_folder/PreparationSteps/CreateSampleInfoFile.sh
}

CreateWorkDir() {
  source $1
  source $shell_folder/LoadConfig.sh "prepare"
  source $shell_folder/PreparationSteps/CreateWorkDir.sh
}

Prefetch_iGenomes() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-PrefetchData"
  source $shell_folder/PrefetchData/Prefetch_iGenomes.sh
}

preAlignmentQC() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-preAlignmentQC"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/GeneralSteps/preAlignmentQC.sh
}

Alignment() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-Alignment"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/GeneralSteps/Alignment.sh
}

postAlignmentQC() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-postAlignmentQC"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/GeneralSteps/postAlignmentQC.sh $shell_folder/GeneralSteps/dupRadar.R
}

Quantification() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-Analysis"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/Quantification/Quantification.sh $shell_folder/Analysis/Quantification/Quantification_featurecounts.R $shell_folder/Analysis/Quantification/Quantification_annotation.R
}

postQuantificationQC() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-Analysis"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/Quantification/postQuantificationQC.sh $shell_folder/Analysis/Quantification/postQuantificationQC.R
}

BatchCorrection() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-Analysis"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/Quantification/BatchCorrection.sh $shell_folder/Analysis/Quantification/BatchCorrection.R
}

DifferentialExpression() {
  source $1
  source $shell_folder/CheckENV.sh "NGSmodule-Analysis"
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/DifferentialExpression/DifferentialExpression.sh $shell_folder/Analysis/DifferentialExpression/DifferentialExpression.R
}

CNVanalysis() {
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/CNV/CNVanalysis.sh $shell_folder/Analysis/CNV/HMMcopy.R $shell_folder/Analysis/CNV/DNAcopy.R $shell_folder/Analysis/CNV/SNV2ploidy.R
}

GATK-germline-short-variant() {
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/GATK/GATK-germline-short-variant.sh
}

GATK-somatic-short-variant() {
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/GATK/GATK-somatic-short-variant.sh
}

GATK-germline-CNV() {
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/GATK/GATK-germline-CNV.sh
}

GATK-somatic-CNV() {
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/GATK/GATK-somatic-CNV.sh
}

Strelka2-germline-short-variant(){
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/Strelka2/Strelka2-germline-short-variant.sh
}

Strelka2-somatic-short-variant(){
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/Strelka2/Strelka2-somatic-short-variant.sh
}

Samtools-variant-calling(){
  source $1
  source $shell_folder/LoadConfig.sh
  source $shell_folder/Analysis/Samtools/Samtools-variant-calling.sh
}

CreateSCPConfigFile() {
  source $shell_folder/SingleCellPipe/SCP-PreparationSteps/CreateSCPConfigFile.sh $1
}

CreateSCPSampleInfoFile() {
  source $shell_folder/SingleCellPipe/SCP-PreparationSteps/CreateSCPSampleInfoFile.sh
}

CreateSCPWorkDir() {
  source $1
  source $shell_folder/SingleCellPipe/LoadSCPConfig.sh "prepare"
  source $shell_folder/SingleCellPipe/SCP-PreparationSteps/CreateSCPWorkDir.sh
}

RunCellranger() {
  source $1
  source $shell_folder/CheckENV.sh  "NGSmodule-SCP"
  source $shell_folder/SingleCellPipe/LoadSCPConfig.sh
  source $shell_folder/SingleCellPipe/SCP-GeneralSteps/RunCellranger/RunCellranger.sh $shell_folder/SingleCellPipe
}

RunCellQC() {
  source $1
  source $shell_folder/CheckENV.sh  "NGSmodule-SCP"
  source $shell_folder/SingleCellPipe/LoadSCPConfig.sh
  source $shell_folder/SingleCellPipe/SCP-Analysis/CellQC/RunCellQC.sh  $shell_folder/SingleCellPipe 
}

RunStandardSCP() {
  source $1
  source $shell_folder/CheckENV.sh  "NGSmodule-SCP"
  source $shell_folder/SingleCellPipe/LoadSCPConfig.sh
  source $shell_folder/SingleCellPipe/SCP-Analysis/StandardSCP/RunStandardSCP.sh  $shell_folder/SingleCellPipe 
}

RunIntegrationSCP() {
  source $1
  source $shell_folder/CheckENV.sh  "NGSmodule-SCP"
  source $shell_folder/SingleCellPipe/LoadSCPConfig.sh
  source $shell_folder/SingleCellPipe/SCP-Analysis/IntegrationSCP/RunIntegrationSCP.sh  $shell_folder/SingleCellPipe 
}


help() {
  cat <<-EOF
##########################################################################################

  Description: A flexible, modularization, and pragmatic workflow to process the NGS data 
               in batches.

  Author: ZhangHao

##########################################################################################

  Usage: 
  
    NGSmodule [MODE options] [ -c <Configuration file> ]
  
  MODE options:
    # Prefetch_iGenomes
    # Prefetch_SRA
    # Prefetch_sequences

    # PreparationSteps:
       CreateConfigFile         Create a configuration template file for NGSmodule.        
       CreateSampleInfoFile     Create a sample information template file for NGSmodule.
       CreateWorkDir            Create a working directory. The configuration file and
                                the sample information file must be provided together.
    
    # GeneralSteps:
       preAlignmentQC           
       Alignment                
       postAlignmentQC
       BatchCorrection          

    # ExpressionAnalysis:
       Quantification
       postQuantificationQC   
       DifferentialExpression   

    # CNVAnalysis:
       CNVanalysis
    
    # GATK:
       GATK-germline-short-variant
       GATK-somatic-short-variant
       GATK-germline-CNV
       GATK-somatic-CNV
    
    # Strelka2:
       Strelka2-germline-short-variant
       Strelka2-somatic-short-variant
    
    # Samtools:
       Samtools-variant-calling
    
    # SingleCellPipe:
       CreateSCPConfigFile
       CreateSCPSampleInfoFile
       CreateSCPWorkDir
       RunCellranger
       RunCellQC
       RunStandardSCP
       RunIntegrationSCP
    
  Other options:
    -c, --ConfigFile          Specify the path of configuration file.
    -h, --help                Show this message.
    -v, --version             Show the version of NGSmodule.

##########################################################################################

EOF

}

version_info() {
  cat <<-EOF
################################
    NGSmodule vsersion: 0.1.0   
################################
EOF
}

#################### Parsing the parameters ##################################################
echo ""
getopt -T &>/dev/null
[ $? -ne 4 ] && {
  echo "getopt is not enhanced version\n"
  exit 1
}

parameters=$(getopt --options c:hv --longoptions ConfigFile,help,version -n "$0" -- "$@")
[ $? -ne 0 ] && {
  echo -e "Try '$0 --help' for more information.\n"
  exit 1
}

eval set -- "$parameters"
while true; do
  case $1 in
  -c | --ConfigFile)
    ConfigFile=$2
    shift 2
    ;;
  -h | --help)
    help
    exit 0
    ;;
  -v | --version)
    version_info
    exit 0
    ;;
  --)
    shift
    if [[ $# == 0 ]]; then
      echo -e "Please select a MODE option. Try '$0 --help' for more information.\n"
      exit 1
    elif [[ $1 == "CreateConfigFile" ]]; then
      CreateConfigFile $ConfigFile
      exit 0
    elif [[ $1 == "Prefetch_iGenomes" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Prefetch_iGenomes MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Prefetch_iGenomes $ConfigFile
      exit 0
    elif [[ $1 == "CreateSampleInfoFile" ]]; then
      CreateSampleInfoFile
      exit 0
    elif [[ $1 == "CreateWorkDir" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in CreateWorkDir MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      CreateWorkDir $ConfigFile
      exit 0
    elif [[ $1 == "preAlignmentQC" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in preAlignmentQC MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      preAlignmentQC $ConfigFile
      exit 0
    elif [[ $1 == "Alignment" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Alignment MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Alignment $ConfigFile
      exit 0
    elif [[ $1 == "postAlignmentQC" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in postAlignmentQC MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      postAlignmentQC $ConfigFile
      exit 0
    elif [[ $1 == "Quantification" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Quantification $ConfigFile
      exit 0
    elif [[ $1 == "postQuantificationQC" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in postQuantificationQC MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      postQuantificationQC $ConfigFile
      exit 0
    elif [[ $1 == "BatchCorrection" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in BatchCorrection MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      BatchCorrection $ConfigFile
      exit 0
    elif [[ $1 == "DifferentialExpression" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in DifferentialExpression MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      DifferentialExpression $ConfigFile
      exit 0
    elif [[ $1 == "CNVanalysis" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in CNVanalysis MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      CNVanalysis $ConfigFile
      exit 0
    elif [[ $1 == "GATK-germline-short-variant" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in GATK-germline-short-variant MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      GATK-germline-short-variant $ConfigFile
      exit 0
    elif [[ $1 == "GATK-somatic-short-variant" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in GATK-somatic-short-variant MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      GATK-somatic-short-variant $ConfigFile
      exit 0
    elif [[ $1 == "GATK-germline-CNV" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in GATK-germline-CNV MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      GATK-germline-CNV $ConfigFile
      exit 0
    elif [[ $1 == "GATK-somatic-CNV" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in GATK-somatic-CNV MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      GATK-somatic-CNV $ConfigFile
      exit 0
    elif [[ $1 == "Strelka2-germline-short-variant" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Strelka2-germline-short-variant MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Strelka2-germline-short-variant $ConfigFile
      exit 0
    elif [[ $1 == "Strelka2-somatic-short-variant" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Strelka2-somatic-short-variant MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Strelka2-somatic-short-variant $ConfigFile
      exit 0
    elif [[ $1 == "Samtools-variant-calling" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Samtools-variant-calling MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Samtools-variant-calling $ConfigFile
      exit 0

    ### SingleCellPipe
    elif [[ $1 == "CreateSCPConfigFile" ]]; then
      CreateSCPConfigFile $ConfigFile
      exit 0
    elif [[ $1 == "CreateSCPSampleInfoFile" ]]; then
      CreateSCPSampleInfoFile
      exit 0
    elif [[ $1 == "CreateSCPWorkDir" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in CreateSCPWorkDir MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      CreateSCPWorkDir $ConfigFile
      exit 0
    elif [[ $1 == "RunCellranger" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in RunCellranger MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      RunCellranger $ConfigFile
      exit 0
    elif [[ $1 == "RunCellQC" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in RunCellQC MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      RunCellQC $ConfigFile
      exit 0
    elif [[ $1 == "Integration" ]]; then
      { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
      [ $? -ne 0 ] && {
        echo -e "ERROR!\nOption -c|--ConfigFile needed in Integration MODE!\nTry '$0 --help' for more information.\n"
        exit 1
      }
      CheckConfigFile $ConfigFile
      Integration $ConfigFile
      exit 0

    else
      echo -e "Invalid MODE: $1 \nTry '$0 --help' for more information.\n"
    fi
    break
    ;;
  -*)
    echo "error: no such option $1.\n"
    exit 1
    ;;
  *)
    echo "error: no such option $1.\n"
    exit 1
    ;;
  esac
done
